*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'jc.ll'
source_filename = "jc.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

module asm ".globl _ZSt21ios_base_library_initv"

%"class.std::basic_ostream" = type { ptr, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", ptr, i8, i8, ptr, ptr, ptr, ptr }
%"class.std::ios_base" = type { ptr, i64, i64, i32, i32, i32, ptr, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, ptr, %"class.std::locale" }
%"struct.std::ios_base::_Words" = type { ptr, i64 }
%"class.std::locale" = type { ptr }

@_ZSt4cout = external global %"class.std::basic_ostream", align 8

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}

declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8), i32 noundef) #1

declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8), ptr noundef) #1

declare noundef nonnull align 8 dereferenceable(8) ptr @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(ptr noundef nonnull align 8 dereferenceable(8)) #1

attributes #0 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'jc.ll'
source_filename = "jc.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

module asm ".globl _ZSt21ios_base_library_initv"

%"class.std::basic_ostream" = type { ptr, %"class.std::basic_ios" }
%"class.std::basic_ios" = type { %"class.std::ios_base", ptr, i8, i8, ptr, ptr, ptr, ptr }
%"class.std::ios_base" = type { ptr, i64, i64, i32, i32, i32, ptr, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, ptr, %"class.std::locale" }
%"struct.std::ios_base::_Words" = type { ptr, i64 }
%"class.std::locale" = type { ptr }

@_ZSt4cout = external global %"class.std::basic_ostream", align 8

; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}

declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8), i32 noundef) #1

declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8), ptr noundef) #1

declare noundef nonnull align 8 dereferenceable(8) ptr @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(ptr noundef nonnull align 8 dereferenceable(8)) #1

attributes #0 = { mustprogress noinline norecurse optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand large div/rem (expand-large-div-rem) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Expand large div/rem (expand-large-div-rem) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Expand large fp convert (expand-large-fp-convert) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Expand large fp convert (expand-large-fp-convert) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

; Loop:
5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

; Exit blocks
15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

; Loop:
5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

; Exit blocks
15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

; Loop:
5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

; Exit blocks
15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

; Loop:
5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

; Exit blocks
15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Expand memcmp() to load/stores (expand-memcmp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Expand memcmp() to load/stores (expand-memcmp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before TLS Variable Hoist (tlshoist) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After TLS Variable Hoist (tlshoist) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Exception handling preparation (dwarf-eh-prepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Exception handling preparation (dwarf-eh-prepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Prepare callbr (callbrprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Prepare callbr (callbrprepare) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: mustprogress noinline norecurse optnone uwtable
define dso_local noundef i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 2, ptr %3, align 4
  store i32 2, ptr %2, align 4
  store i32 1, ptr %4, align 4
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i32, ptr %2, align 4
  %7 = load i32, ptr %3, align 4
  %8 = icmp sle i32 %6, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = load i32, ptr %4, align 4
  %11 = load i32, ptr %2, align 4
  %12 = mul nsw i32 %10, %11
  store i32 %12, ptr %4, align 4
  %13 = load i32, ptr %2, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, ptr %2, align 4
  br label %5, !llvm.loop !6

15:                                               ; preds = %5
  %16 = load i32, ptr %4, align 4
  %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef %16)
  %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEPFRSoS_E(ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_)
  %19 = load i32, ptr %1, align 4
  ret i32 %19
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (x86-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (x86-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Argument Stack Rebase (x86argumentstackrebase) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Argument Stack Rebase (x86argumentstackrebase) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
176B	  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
192B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
208B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
224B	  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
240B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
256B	  JMP_1 %bb.1

272B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

288B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
304B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %8:gr64
352B	  $esi = COPY %11:gr32
368B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %10:gr64 = COPY $rax
416B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %10:gr64
464B	  $rsi = COPY %6:gr64
480B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
496B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  %7:gr64 = COPY $rax
528B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
544B	  $eax = COPY %4:gr32
560B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
176B	  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
192B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
208B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
224B	  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
240B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
256B	  JMP_1 %bb.1

272B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

288B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
304B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
320B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $rdi = COPY %8:gr64
352B	  $esi = COPY %11:gr32
368B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %10:gr64 = COPY $rax
416B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %10:gr64
464B	  $rsi = COPY %6:gr64
480B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
496B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  %7:gr64 = COPY $rax
528B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
544B	  $eax = COPY %4:gr32
560B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Pre-configure (tilepreconfig) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tile Register Pre-configure (tilepreconfig) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri %15:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %10:gr64
  $rsi = COPY %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr64 = COPY $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %4:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm killed %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri killed %15:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $rsi = COPY killed %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr64 = COPY killed $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %4:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm killed %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri killed %15:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $rsi = COPY killed %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr64 = COPY killed $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %4:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm killed %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri killed %15:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $rsi = COPY killed %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr64 = COPY killed $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %4:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = IMUL32rm killed %20:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = ADD32ri killed %15:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $rsi = COPY killed %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr64 = COPY killed $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %4:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = COPY killed %20:gr32
  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = COPY killed %15:gr32
  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $rsi = COPY killed %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr64 = COPY killed $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %4:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %19:gr32 = COPY killed %20:gr32
  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store (s32) into %ir.4)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = COPY killed %15:gr32
  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %14:gr32 :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = COPY killed $rax
  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %10:gr64
  $rsi = COPY killed %6:gr64
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr64 = COPY killed $rax
  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %4:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm killed %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
176B	  %19:gr32 = COPY killed %20:gr32
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store (s32) into %ir.4)
224B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %14:gr32 = COPY killed %15:gr32
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY killed %8:gr64
384B	  $esi = COPY killed %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY killed %10:gr64
496B	  $rsi = COPY killed %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY killed %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm killed %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
176B	  %19:gr32 = COPY killed %20:gr32
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %19:gr32 :: (store (s32) into %ir.4)
224B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %14:gr32 = COPY killed %15:gr32
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY killed %8:gr64
384B	  $esi = COPY killed %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY killed %10:gr64
496B	  $rsi = COPY killed %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY killed %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
176B	  %19:gr32 = COPY %20:gr32
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %14:gr32 = COPY %15:gr32
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Register Coalescer (register-coalescer) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %20:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
176B	  %19:gr32 = COPY %20:gr32
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %14:gr32 = COPY %15:gr32
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Register Coalescer (register-coalescer) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY killed $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY killed $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  %2:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm %2:gr32, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  %19:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  %19:gr32 = IMUL32rm %19:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %19:gr32 :: (store (s32) into %ir.4)
224B	  %14:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  %14:gr32 = ADD32ri %14:gr32(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %14:gr32 :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  %11:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  %8:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  $rdi = COPY %8:gr64
384B	  $esi = COPY %11:gr32
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  %10:gr64 = COPY $rax
448B	  %6:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY %10:gr64
496B	  $rsi = COPY %6:gr64
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  dead %7:gr64 = COPY $rax
560B	  %4:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
576B	  $eax = COPY %4:gr32
592B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
224B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY killed renamable $rax
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
592B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
224B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY killed renamable $rax
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
592B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
224B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY killed renamable $rax
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
592B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
224B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY killed renamable $rax
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
592B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
224B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY killed renamable $rax
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
592B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.5):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

96B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
112B	  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
128B	  JCC_1 %bb.3, 15, implicit killed $eflags

144B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.1

160B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
192B	  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
208B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
224B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
256B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
288B	  JMP_1 %bb.1

304B	bb.3 (%ir-block.15):
	; predecessors: %bb.1

320B	  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
336B	  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $rdi = COPY killed renamable $rax
512B	  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
528B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
560B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
592B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Late Instructions Cleanup Pass (machine-latecleanup) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Late Instructions Cleanup Pass (machine-latecleanup) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = COPY killed renamable $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert KCFI indirect call checks (kcfi) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert KCFI indirect call checks (kcfi) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs when possible (x86-compress-evex) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs when possible (x86-compress-evex) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Sanitizer Binary Metadata (machine-sanmd) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Sanitizer Binary Metadata (machine-sanmd) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Frame Layout Analysis (stack-frame-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Frame Layout Analysis (stack-frame-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Return Thunks (x86-return-thunks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Return Thunks (x86-return-thunks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)

bb.1 (%ir-block.5):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  JCC_1 %bb.3, 15, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = IMUL32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  JMP_1 %bb.1

bb.3 (%ir-block.15):
; predecessors: %bb.1

  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
  renamable $rsi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, $noreg
  $rdi = MOV64rr killed $rax
  CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEPFRSoS_E, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

